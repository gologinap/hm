const express = require("express");
const axios = require("axios");
const fs = require("fs");
const path = require("path");

const app = express();
const PORT = process.env.PORT || 3000;
const EMAIL_FILE = path.join(__dirname, "emails.json");

let APP_URL = null;

// Middleware
app.use(express.json());

// T·∫°o file email n·∫øu ch∆∞a t·ªìn t·∫°i
if (!fs.existsSync(EMAIL_FILE)) {
  fs.writeFileSync(EMAIL_FILE, JSON.stringify([]));
}

// -------------------- API --------------------

// L·∫•y code t·ª´ API b√™n ngo√†i (ƒê√É N√ÇNG C·∫§P LOGIC)
app.post("/api/get-code", async (req, res) => {
  try {
    const { email, token, client_id } = req.body;
    console.log(`üì® B·∫Øt ƒë·∫ßu l·∫•y email v√† tr√≠ch xu·∫•t code cho: ${email}`);

    // S·ª≠ d·ª•ng API get_messages_oauth2 ƒë·ªÉ c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
    const response = await axios.post(
      "https://tools.dongvanfb.net/api/get_messages_oauth2",
      { email, refresh_token: token, client_id }
    );

    console.log("üì• Response th√¥ t·ª´ API ngo√†i:", response.data);

    let extractedCode = null;

    // N·∫øu API g·ªçi th√†nh c√¥ng v√† c√≥ tin nh·∫Øn tr·∫£ v·ªÅ
    if (response.data.status && response.data.messages && response.data.messages.length > 0) {
      // Duy·ªát qua t·ª´ng tin nh·∫Øn ƒë·ªÉ t√¨m code
      for (const message of response.data.messages) {
        // ∆Øu ti√™n 1: L·∫•y code n·∫øu API ƒë√£ b√≥c t√°ch s·∫µn
        if (message.code) {
          extractedCode = message.code;
          console.log(`‚úÖ T√¨m th·∫•y code do API b√≥c t√°ch s·∫µn: ${extractedCode}`);
          break; // Tho√°t v√≤ng l·∫∑p khi ƒë√£ t√¨m th·∫•y code
        }

        // ∆Øu ti√™n 2: T·ª± d√πng Regex ƒë·ªÉ t√¨m code trong ti√™u ƒë·ªÅ
        const regex = /\b\d{5,6}\b/; // T√¨m m·ªôt d√£y s·ªë c√≥ 5 ho·∫∑c 6 ch·ªØ s·ªë
        if (message.subject) {
            const match = message.subject.match(regex);
            if (match) {
              extractedCode = match[0];
              console.log(`‚úÖ T·ª± tr√≠ch xu·∫•t code t·ª´ ti√™u ƒë·ªÅ: ${extractedCode}`);
              break; // Tho√°t v√≤ng l·∫∑p khi ƒë√£ t√¨m th·∫•y code
            }
        }
      }
    }

    // Tr·∫£ k·∫øt qu·∫£ v·ªÅ cho giao di·ªán
    if (extractedCode) {
      res.json({ code: extractedCode });
    } else {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y code trong b·∫•t k·ª≥ email n√†o.");
      res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y code trong email." });
    }

  } catch (err) {
    console.error("‚ùå L·ªói nghi√™m tr·ªçng khi g·ªçi API /api/get-code:", err.response ? err.response.data : err.message);
    res.status(500).json({ error: err.message });
  }
});

// L∆∞u email + code v√†o file
app.post("/api/save-email", (req, res) => {
  try {
    const { email, code } = req.body;
    if (!email || !code) return res.status(400).json({ error: "Thi·∫øu email ho·∫∑c code" });

    const emails = JSON.parse(fs.readFileSync(EMAIL_FILE, "utf-8"));
    const existingEmailIndex = emails.findIndex(e => e.email === email);
    if (existingEmailIndex > -1) {
        emails[existingEmailIndex].code = code;
        emails[existingEmailIndex].createdAt = new Date().toISOString();
        emails[existingEmailIndex].used = false;
    } else {
        emails.push({ email, code, createdAt: new Date().toISOString(), used: false });
    }
    fs.writeFileSync(EMAIL_FILE, JSON.stringify(emails, null, 2));
    res.json({ status: "saved" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// L·∫•y email ti·∫øp theo ch∆∞a d√πng
app.get("/api/next-email", (req, res) => {
  try {
    const emails = JSON.parse(fs.readFileSync(EMAIL_FILE, "utf-8"));
    const next = emails.find(e => !e.used);
    if (!next) return res.status(404).json({ error: "Kh√¥ng c√≤n email n√†o ch∆∞a d√πng" });
    next.used = true;
    fs.writeFileSync(EMAIL_FILE, JSON.stringify(emails, null, 2));
    res.json({ email: next.email, code: next.code || null });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// API 1: L·∫•y 1 email kh√¥ng tr√πng l·∫∑p t·ª´ danh s√°ch ƒë√£ l∆∞u
app.get("/api/get-unique-email", (req, res) => {
  try {
    const emails = JSON.parse(fs.readFileSync(EMAIL_FILE, "utf-8"));
    const uniqueEmail = emails.find(e => !e.used);
    if (!uniqueEmail) return res.status(404).json({ error: "ƒê√£ h·∫øt email ƒë·ªÉ s·ª≠ d·ª•ng." });
    uniqueEmail.used = true;
    fs.writeFileSync(EMAIL_FILE, JSON.stringify(emails, null, 2));
    res.json({ email: uniqueEmail.email });
  } catch (err) {
    console.error("L·ªói get-unique-email:", err.message);
    res.status(500).json({ error: err.message });
  }
});

// API 2: L·∫•y code theo email ƒë∆∞·ª£c cung c·∫•p
app.get("/api/code", (req, res) => {
  try {
    const { email } = req.query;
    if (!email) return res.status(400).json({ error: "Vui l√≤ng cung c·∫•p email." });
    const emails = JSON.parse(fs.readFileSync(EMAIL_FILE, "utf-8"));
    const emailData = emails.find(e => e.email.toLowerCase() === email.toLowerCase());
    if (!emailData) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y email." });
    res.json({ email: emailData.email, code: emailData.code || "N/A" });
  } catch (err) {
    console.error("L·ªói /api/code:", err.message);
    res.status(500).json({ error: err.message });
  }
});

// Ping ƒë·ªÉ tr√°nh Render ng·ªß
setInterval(async () => {
  if (!APP_URL) return;
  try {
    await axios.get(APP_URL);
    console.log("Pinged self to keep alive");
  } catch (err) {
    console.log("Ping error:", err.message);
  }
}, 4 * 60 * 1000);

// -------------------- FRONT-END --------------------
app.get("/", (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Clipboard Copy App</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<script src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
<style>
*{box-sizing:border-box} body{margin:0;font-family:system-ui,sans-serif;background:#121212;color:#fff;padding:16px} h2{text-align:center;font-size:1.5rem;margin-bottom:16px} textarea{width:100%;height:150px;padding:12px;font-size:1rem;border-radius:8px;border:1px solid #333;background:#1e1e1e;color:#fff;resize:vertical;margin-bottom:12px} button{padding:12px;font-size:1rem;font-weight:bold;margin:6px 4px;border:none;border-radius:8px;cursor:pointer;width:48%} .copy-btn{background:#0a84ff;color:#fff} .copy-btn:hover{background:#006fd6} .nav-btn{background:#333;color:#fff} .nav-btn:hover{background:#555} .save-btn{background:#28a745;color:#fff} .save-btn:hover{background:#1e7e34} .status,.info{margin-top:12px;text-align:center} .info{font-size:0.95rem;color:#bbb} .code-display{background:#2a2a2a;padding:12px;border-radius:8px;font-size:1.4rem;font-weight:bold;color:#4dffc9;letter-spacing:3px;margin-top:16px;border:1px solid #444} @media(max-width:600px){button{width:100%}}
</style>
</head>
<body>
<div id="root"></div>
<script type="text/babel">
const { useState } = React;
function App() {
  const [rawData, setRawData] = useState("");
  const [lines, setLines] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [currentCode, setCurrentCode] = useState(null);
  const [status, setStatus] = useState("üïì Ch∆∞a c√≥ h√†nh ƒë·ªông");

  const parseData = (text) => {
    const parsed = text.split("\\n").map(l => l.trim()).filter(Boolean);
    setLines(parsed);
    setCurrentIndex(0);
    setCurrentCode(null);
    setStatus("üïì Ch∆∞a c√≥ h√†nh ƒë·ªông");
  };

  const currentLine = lines[currentIndex] || "";
  const [currentEmail, currentPass, currentToken, currentClient] = currentLine.split("|");

  const copyEmail = async () => {
    if (!currentEmail) return setStatus("‚ö†Ô∏è Ch∆∞a c√≥ email");
    await navigator.clipboard.writeText(currentEmail);
    setStatus("‚úÖ ƒê√£ copy email: " + currentEmail);
  };

  const fetchCode = async () => {
    if (!currentEmail || !currentToken || !currentClient) return setStatus("‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu");
    try {
      setStatus("‚è≥ ƒêang l·∫•y code...");
      setCurrentCode(null);
      const res = await fetch("/api/get-code", {
        method:"POST",
        headers:{"Content-Type":"application/json"},
        body:JSON.stringify({email:currentEmail,token:currentToken,client_id:currentClient})
      });
      if (!res.ok) { // B·∫Øt l·ªói HTTP nh∆∞ 404, 500
          const errData = await res.json();
          throw new Error(errData.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
      }
      const data = await res.json();
      if(data.code){
        setCurrentCode(data.code);
        setStatus("‚úÖ ƒê√£ nh·∫≠n ƒë∆∞·ª£c m√£!")
      } else {
        setCurrentCode(null);
        setStatus("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£")
      }
    } catch(err){
      setCurrentCode(null);
      setStatus("‚ùå L·ªói: "+err.message)
    }
  };

  const saveCode = async () => {
    if(!currentEmail||!currentCode) return setStatus("‚ö†Ô∏è Ch∆∞a c√≥ email ho·∫∑c code");
    try{
      const res = await fetch("/api/save-email",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:currentEmail,code:currentCode})});
      const data = await res.json();
      setStatus(data.status?"üíæ ƒê√£ l∆∞u m√£ cho "+currentEmail:data.error);
    }catch(err){setStatus("‚ùå L·ªói khi l∆∞u: "+err.message)}
  };

  const handleNext = () => {
    if(currentIndex<lines.length-1){
      setCurrentIndex(currentIndex+1);
      setCurrentCode(null);
      setStatus("‚è≠ ƒêang x·ª≠ l√Ω d√≤ng ti·∫øp...")
    } else {
      setStatus("‚úÖ ƒê√£ h·∫øt danh s√°ch");
    }
  };

  const handleBack = () => {
    if(currentIndex>0){
      setCurrentIndex(currentIndex-1);
      setCurrentCode(null);
      setStatus("üîô Quay l·∫°i d√≤ng tr∆∞·ªõc")
    } else {
      setStatus("‚ö†Ô∏è ƒêang ·ªü d√≤ng ƒë·∫ßu ti√™n");
    }
  };

  return(
    <div>
      <h2>üìã Auto Copy & Get Code</h2>
      <textarea placeholder="D√°n d·ªØ li·ªáu: email|pass|token|client_id m·ªói d√≤ng" value={rawData} onChange={e=>{setRawData(e.target.value);parseData(e.target.value)}}/>
      <div className="info">üìÑ T·ªïng d√≤ng: {lines.length}</div>
      <div className="info">‚ñ∂Ô∏è ƒêang x·ª≠ l√Ω d√≤ng {currentIndex + 1} / {lines.length}</div>
      <div className="info">‚úâÔ∏è Email: <strong>{currentEmail||"N/A"}</strong></div>
      {currentCode && ( <div className="info code-display"> {currentCode} </div> )}
      <div style={{display:'flex',flexWrap:'wrap',justifyContent:'space-between',marginTop:12}}>
        <button className="nav-btn" onClick={handleBack}>üîô Back Mail</button>
        <button className="nav-btn" onClick={handleNext}>‚è≠ Next Mail</button>
      </div>
      <button className="copy-btn" onClick={()=>{copyEmail();fetchCode()}} style={{marginTop:10}}>üì§ Copy & L·∫•y m√£</button>
      {currentCode && <button className="copy-btn" onClick={()=>navigator.clipboard.writeText(currentCode)} style={{marginTop:12,width:'100%'}}>üìã Copy M√£</button>}
      {!currentCode && status.startsWith("‚ùå") && <button className="copy-btn" onClick={fetchCode} style={{marginTop:12,backgroundColor:"#e03b3b"}}>üîÑ Th·ª≠ l·∫°i</button>}
      {currentCode && <button className="save-btn" onClick={saveCode} style={{marginTop:12,width:'100%'}}>üíæ Save M√£</button>}
      <div className="status">{status}</div>
    </div>
  );
}
ReactDOM.createRoot(document.getElementById("root")).render(<App />);
</script>
</body>
</html>
  `);
});

// -------------------- START SERVER --------------------
app.listen(PORT, () => {
  APP_URL = process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`;
  console.log(`‚úÖ Server running on port ${PORT}`);
});
